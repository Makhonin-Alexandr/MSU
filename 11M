def dfs(v):
    global time
    time += 1
    tin[v] = time
    for u in graph[v]:
        dfs(u)
    time += 1
    tout[v] = time


def ancestor(a, b):
    return tin[a] <= tin[b] < tout[a]


def lca(a, b):
    while not ancestor(a, b):
        a = p[a]
    return a


n = int(input())
time = 0
graph = {}
tin = {}
tout = {}
p = {}
parents = set()
descendants = set()
for i in range(n - 1):
    descendant, parent = input().split()
    descendants.add(descendant)
    parents.add(parent)
    if parent not in graph.keys():
        graph[parent] = []
    if descendant not in graph.keys():
        graph[descendant] = []
    graph[parent].append(descendant)
    p[descendant] = parent
for v in parents - descendants:
    dfs(v)
m = int(input())
for i in range(m):
    a, b = input().split()
    print(lca(a, b))
